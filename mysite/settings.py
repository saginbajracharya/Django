# Django settings for mysite project.

# Generated by 'django-admin startproject' using Django 2.2.7.

# For more information on this file, see
# https://docs.djangoproject.com/en/2.2/topics/settings/

# For the full list of settings and their values, see
# https://docs.djangoproject.com/en/2.2/ref/settings/

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'de$x4014jt#dp)ko9iy4snqn+7&*$v5f#$t7r__f)1s58_x30%'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []
# ALLOWED_HOSTS = ['*'] for DEBUG False static files not working if false on build managed by Apache


# Application definition

INSTALLED_APPS = [
    'polls.apps.PollsConfig', # adding polls app to mysite project 
    'django.contrib.admin', # The admin site. You’ll use it shortly.
    'django.contrib.auth', # An authentication system
    'django.contrib.contenttypes', # A framework for content types.
    'django.contrib.sessions', # A session framework.
    'django.contrib.messages', # A messaging framework.
    'django.contrib.staticfiles', # A framework for managing static files.
    'bootstrap_datepicker_plus'
]

# Middleware is a framework of hooks into Django’s request/response processing. 
# It’s a light, low-level “plugin” system for globally altering Django’s input or output.
# Each middleware component is responsible for doing some specific function. 
# For example, Django includes a middleware component, AuthenticationMiddleware, that associates users with requests using sessions.
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# A string representing the full Python import path to your root URLconf, for example "mydjangoapps.urls". 
# Can be overridden on a per-request basis by setting the attribute urlconf on the incoming HttpRequest object.
ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE'  : 'django.db.backends.postgresql',
        'NAME'    : 'djangoDB',
        'USER'    : 'postgres',
        'PASSWORD': 'sagin',
        'HOST'    : 'localhost',
        'PORT'    : '5432',
    }
}

# Setting up Two Databases
# DATABASES = {
#     'default': {  # a default database must exist. this one will contain the django related data
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': 'world_django',
#         'USER': '...',
#         'PASSWORD': '...',
#         'HOST': '...'
#     },
#     'world_data': {   # this is the legacy database
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': 'world',
#         'USER': '...',
#         'PASSWORD': '...',
#         'HOST': '...'
#     },
# }


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kathmandu'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

